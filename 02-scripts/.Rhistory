select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(Species = str_replace_all(Species, "s__s__","")) %>%
# make a column with Strep or other
mutate(Genus = ifelse(str_detect(Species,"Neisseria"),"Neisseria","Other")) %>%
# remove Species column leaving Genus column
select(Genus, everything()) %>%
select(-Species) %>%
# convert to long format
gather("Library_ID","Counts", 2:ncol(.)) %>%
group_by(Library_ID, Genus) %>%
# sum all Strep read counts and all Other read counts
summarize(Reads = sum(Counts)) %>%
spread(Genus, Reads) %>%
# convert to proportions
adorn_percentages() %>%
ungroup()
ac_neisseria_prop <- neisseria_prop %>%
gather("Genus","Counts", 2:ncol(.)) %>%
mutate(Library_ID = fct_relevel(Library_ID, sample_order_rs)) %>%
arrange(Library_ID) %>%
mutate(Genus = fct_relevel(Genus, "Other","Neisseria")) %>%
ggplot(., aes(x = Library_ID, y = Counts, fill = Genus)) +
geom_bar(stat = "identity") + # , color = "black"
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("#e0e0e0", "#a50026")) +
# theme(axis.text.x = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text = element_text(size = 8)) +
# scale_y_continuous(breaks=scales::pretty_breaks(n=6)) +
scale_y_continuous(labels = function(x) paste0(x*100)) + # Multiply by 100
ylab("Percent") +
xlab("Sample") +
ggtitle("")
ac_neisseria_prop
actinomyces_prop <- anc_calc_raw %>%
# remove poorly-preserved samples
select(-matches(poor_samples %>% str_c(collapse = "|"))) %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","Species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(Species = str_replace_all(Species, "s__s__","")) %>%
# make a column with Strep or other
mutate(Genus = ifelse(str_detect(Species,"Actinomyces"),"Actinomyces","Other")) %>%
# remove Species column leaving Genus column
select(Genus, everything()) %>%
select(-Species) %>%
# convert to long format
gather("Library_ID","Counts", 2:ncol(.)) %>%
group_by(Library_ID, Genus) %>%
# sum all Strep read counts and all Other read counts
summarize(Reads = sum(Counts)) %>%
spread(Genus, Reads) %>%
# convert to proportions
adorn_percentages() %>%
ungroup()
ac_actinomyces_prop <- actinomyces_prop %>%
gather("Genus","Counts", 2:ncol(.)) %>%
mutate(Library_ID = fct_relevel(Library_ID, sample_order_rs)) %>%
arrange(Library_ID) %>%
mutate(Genus = fct_relevel(Genus, "Other","Actinomyces")) %>%
ggplot(., aes(x = Library_ID, y = Counts, fill = Genus)) +
geom_bar(stat = "identity") + # , color = "black"
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("#e0e0e0", "#a50026")) +
# theme(axis.text.x = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text = element_text(size = 8)) +
# scale_y_continuous(breaks=scales::pretty_breaks(n=6)) +
scale_y_continuous(labels = function(x) paste0(x*100)) + # Multiply by 100
ylab("Percent") +
xlab("Sample") +
ggtitle("")
ac_actinomyces_prop
veillonella_prop <- anc_calc_raw %>%
# remove poorly-preserved samples
select(-matches(poor_samples %>% str_c(collapse = "|"))) %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","Species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(Species = str_replace_all(Species, "s__s__","")) %>%
# make a column with Strep or other
mutate(Genus = ifelse(str_detect(Species,"Veillonella"),"Veillonella","Other")) %>%
# remove Species column leaving Genus column
select(Genus, everything()) %>%
select(-Species) %>%
# convert to long format
gather("Library_ID","Counts", 2:ncol(.)) %>%
group_by(Library_ID, Genus) %>%
# sum all Strep read counts and all Other read counts
summarize(Reads = sum(Counts)) %>%
spread(Genus, Reads) %>%
# convert to proportions
adorn_percentages() %>%
ungroup()
ac_veillonella_prop <- veillonella_prop %>%
gather("Genus","Counts", 2:ncol(.)) %>%
mutate(Library_ID = fct_relevel(Library_ID, sample_order_rs)) %>%
arrange(Library_ID) %>%
mutate(Genus = fct_relevel(Genus, "Other","Veillonella")) %>%
ggplot(., aes(x = Library_ID, y = Counts, fill = Genus)) +
geom_bar(stat = "identity") + # , color = "black"
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("#e0e0e0", "#a50026")) +
# theme(axis.text.x = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text = element_text(size = 8)) +
# scale_y_continuous(breaks=scales::pretty_breaks(n=6)) +
ylim(0,10) +
# scale_y_continuous(labels = function(x) paste0(x*100)) + # Multiply by 100
ylab("Percent") +
xlab("Sample") +
ggtitle("")
ac_veillonella_prop
q()
q()
q()
library(knitr)
library(janitor)
library(cuperdec)
library(data.table)
library(magrittr) ## for pipes!
library(dplyr) # for mutate()!
library(tidyverse)
knitr::opts_knit$set(root.dir = normalizePath(".."))
# get only ancient calculus and sources from the metadata table
lib_metadata <- fread("./00-documentation/strep_clades_metadata.tsv") %>%
filter(str_detect(Sample_group, "ancient_calculus|gut|Bone|skin|sediment")) %>%
distinct() %>%
mutate(Sample_alias = str_replace_all(Sample_alias, ".SG1.1",""))
mod_metadata <- fread("./00-documentation/strep_clades_metadata.tsv") %>%
filter(str_detect(Sample_alias,  "VLC|JAE")) %>%
distinct()
# read in the species table. It has the column names already
anc_calc_raw <- fread("./05-results/anc_calc.kraken2.gtdb.report_mpa.tsv.gz")
anc_names <- fread("./05-results/anc_calc_names.tsv", header = F)  %>%
rename(Library_ID = 1) %>%
mutate(Library_ID = str_replace_all(Library_ID, ".SG1.1", ""),
Library_ID = str_replace_all(Library_ID, ".SG1", ""))
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
anc_calc_sp <- anc_calc_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species) %>%
# remove Radcliffe soil and dentin
select(-matches("CSS|CSD"))
# read in the species table
sources_raw <- fread("./05-results/sourceTracker_sources.kraken2.gtdb.report_mpa.tsv")
# read in the file names to add as column headers
source_names <- fread("./05-results/source_names.tsv", header = F) %>%
pull()
# add the sample names to the table
# move the lineage to the rownames so only samples are left as columns
sources_raw <- sources_raw %>%
column_to_rownames("#Classification")
# add the sample names
colnames(sources_raw) <- source_names
# move the lineage back to a column
sources_raw <- sources_raw %>%
rownames_to_column("Lineage")
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
source_sp <- sources_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species)
# read in the species table
mod_calc_raw <- fread("./05-results/mod_calc.kraken2.gtdb.report_mpa.tsv")
# read in the file names to add as column headers
mod_names <- fread("./05-results/mod_calc_names.tsv", header = F) %>%
pull()
# add the sample names to the table
# move the lineage to the rownames so only samples are left as columns
mod_calc_raw <- mod_calc_raw %>%
column_to_rownames("#Classification")
# add the sample names
colnames(mod_calc_raw) <- mod_names
# move the lineage back to a column
mod_calc_raw <- mod_calc_raw %>%
rownames_to_column("Lineage")
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
mod_calc_sp <- mod_calc_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species)
# load the database and convert to a tibble, then clean up dupliate entries
source_table <- fread("./00-documentation/cuperdec_oral_sources_gtdb_r202.tsv") %>%
select(species, Isolation_Source) %>%
as_tibble() %>%
# remove duplicates
distinct()
# if there are 2 entries then the species has both an "oral" source and an "other" source
# this is b/c at least 1 genome has the isolation source indicated as "oral" in NCBI
# since at least 1 genome was isolated from an "oral" site, we can say it's oral
# and need to remove the row that has the source as "other"
source_table <- source_table %>%
anti_join(source_table %>%
select(species, Isolation_Source) %>%
group_by(species) %>%
count() %>%
filter(n > 1) %>%
select(species) %>% ungroup()) %>%
# and then add back those species with an isolation source of "oral"
bind_rows(., source_table %>%
select(species, Isolation_Source)%>%
group_by(species) %>%
count() %>%
filter(n > 1) %>%
select(species) %>%
ungroup() %>%
mutate(Isolation_Source = "oral"))
database <- load_database(source_table, target = "oral") %>% print()
tax_table <- anc_calc_sp %>%
full_join(., source_sp) %>%
full_join(., mod_calc_sp) %>%
# need to convert NA to 0
mutate_all(~replace(., is.na(.), 0))
taxatable <- load_taxa_table(tax_table) # %>% print()
metadata <- lib_metadata  %>%
# now make the names match what was used in eager and what the species tables now have
mutate(Run_accession = ifelse(is.na(Run_accession) & Study == "Iberian", Sample_alias, Run_accession),
Secondary_sample_accession= ifelse(is.na(Secondary_sample_accession) & Study == "Iberian", Sample_alias, Secondary_sample_accession),
Run_accession = ifelse(str_detect(Study, "Granehaell2021|FellowsYates2021|Pacific|Velsko2018|Velsko2022|Fagernaes2022|Jacobson2020|Iberian|Neukamm2020|Warinner2014"), Sample_alias, Run_accession),
Run_accession = ifelse(Study == "Moraitou2022", Secondary_sample_accession, Run_accession),
Run_accession = ifelse(Study == "Mann2018", Sample_alias, Run_accession)) %>%
# select only the samples of interest and the sources
right_join(., anc_names %>%
as_data_frame(.) %>%
rename(Run_accession = 1) %>%
bind_rows(., source_names %>%
as_data_frame(.) %>%
rename(Run_accession = 1))) %>%
# remove duplicated ARS bone sample entries
filter(!(Study == "Pacific"  & str_sub(Sample_alias, 1, 3) == "ARS")) %>%
# plot by study for some clarity
# need to change the names of the source studies to the sources to keep consistent with other figures
mutate(Study = ifelse(str_detect(Study, "Oh2016"),"Skin",
ifelse(str_detect(Study, "Slon2017"),"Sediment",
ifelse(str_detect(Study, "Obregon|Rampelli"),"Gut",
ifelse(str_detect(Study, "HMP|Sankaranarayanan2015"),"Gut",
ifelse(str_detect(Sample_alias, "ARS"),"Bone", Study)))))) %>%
arrange(Study, Sample_alias) %>%
# remove soil, dentin, bones
filter(!str_detect(Sample_alias, "CSD|CSS|CSN|CSL|CDM045.Z0101|CDM047.Z0101|CDM053.J0101|CDM054.A0101"))
metadata <- metadata %>%
bind_rows(., lib_metadata  %>%
# now make the names match what was used in eager and the species tables now have
mutate(Run_accession = ifelse(is.na(Run_accession) & Study == "Iberian", Sample_alias, Run_accession),
Run_accession = ifelse(str_detect(Sample_alias, "VLC|JAE"),Sample_alias, Run_accession)) %>%
# select only the samples of interest and the sources
right_join(., mod_names %>% as_data_frame(.) %>% rename(Run_accession = 1))) %>%
mutate(Study = ifelse(str_detect(Run_accession, "JAE|VLC"),"Modern calculus",Study))%>%
mutate(Study = fct_relevel(Study, "Sediment","Bone","Gut","Skin", "Modern calculus"))
metadata_map <- load_map(metadata,
sample_col = "Run_accession",
source_col = "Study") # %>% print()
# in metadata_map but not taxatable
taxatable %>% select(Sample) %>% unique() %>%
anti_join(., metadata_map) %>%
arrange(Sample)
# in taxatable but not metadata_map
metadata_map %>%
anti_join(., taxatable %>% select(Sample) %>% unique())
metadata_map %>%
filter(!str_detect(Sample_Source, "Bone|Gut|Sediment|Skin|Modern")) %>%
count()
curves <- calculate_curve(taxatable, database = database) %>%
print()
plot_cuperdec(curves)
curves %>%
group_by(Sample) %>%
slice_min(Rank, n = 20) %>%
left_join(., source_table %>%
rename(Taxon = species), by = "Taxon")
plot_cuperdec(curves, metadata_map, restrict_x = 250)
adaptive_rank_burnin_result <- adaptive_burnin_filter(curves, percent_threshold = 40)
cd_curve_plot <- plot_cuperdec(curves, metadata_map, adaptive_rank_burnin_result, restrict_x = 250)
cd_curve_plot
# ggsave("./06-publication/supplemental_figures/Sup_fig_SXX1/cuperdec_anc_calc.png", plot = cd_curve_plot, device = "png",
#        scale = 1, width = 9, height = 5, units = c("in"), dpi = 300)
#
# ggsave("./06-publication/supplemental_figures/Sup_fig_SXX1/cuperdec_anc_calc.pdf", plot = cd_curve_plot, device = "pdf",
#        scale = 1, width = 9, height = 5, units = c("in"), dpi = 300)
# poorly-preserved samples
discard_list <- adaptive_rank_burnin_result %>% filter(!Passed) %>%
# select only the samples, not the source controls
left_join(., metadata_map, by = "Sample") %>%
distinct() %>%
filter(!str_detect(Sample_Source, "gut|sediment|Bone|skin")) %>%
select(Sample) %>%
unique()
# poorly-preserved samples
discard_list <- adaptive_rank_burnin_result %>% filter(!Passed) %>%
# select only the samples, not the source controls
left_join(., metadata_map, by = "Sample") %>%
distinct() %>%
filter(!str_detect(Sample_Source, "Gut|Sediment|Bone|Skin")) %>%
select(Sample) %>%
unique()
discard_list
fwrite(discard_list, "./05-results/cuperdec_anc_calc_poor_samples.tsv", sep = "\t", quote = F)
knitr::opts_knit$set(root.dir = normalizePath(".."))
fwrite(discard_list, "./05-results/cuperdec_anc_calc_poor_samples.tsv", sep = "\t", quote = F)
q()
library(knitr)
library(janitor)
library(cuperdec)
library(data.table)
library(magrittr) ## for pipes!
library(dplyr) # for mutate()!
library(tidyverse)
knitr::opts_knit$set(root.dir = normalizePath(".."))
# get only ancient calculus and sources from the metadata table
lib_metadata <- fread("./00-documentation/strep_clades_metadata.tsv") %>%
filter(str_detect(Sample_group, "ancient_calculus|gut|Bone|skin|sediment")) %>%
distinct() %>%
mutate(Sample_alias = str_replace_all(Sample_alias, ".SG1.1",""))
mod_metadata <- fread("./00-documentation/strep_clades_metadata.tsv") %>%
filter(str_detect(Sample_alias,  "VLC|JAE")) %>%
distinct()
# read in the species table. It has the column names already
anc_calc_raw <- fread("./05-results/anc_calc.kraken2.gtdb.report_mpa.tsv.gz")
anc_names <- fread("./05-results/anc_calc_names.tsv", header = F)  %>%
rename(Library_ID = 1) %>%
mutate(Library_ID = str_replace_all(Library_ID, ".SG1.1", ""),
Library_ID = str_replace_all(Library_ID, ".SG1", ""))
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
anc_calc_sp <- anc_calc_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species) %>%
# remove Radcliffe soil and dentin
select(-matches("CSS|CSD"))
# read in the species table
sources_raw <- fread("./05-results/sourceTracker_sources.kraken2.gtdb.report_mpa.tsv")
# read in the file names to add as column headers
source_names <- fread("./05-results/source_names.tsv", header = F) %>%
pull()
# add the sample names to the table
# move the lineage to the rownames so only samples are left as columns
sources_raw <- sources_raw %>%
column_to_rownames("#Classification")
# add the sample names
colnames(sources_raw) <- source_names
# move the lineage back to a column
sources_raw <- sources_raw %>%
rownames_to_column("Lineage")
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
source_sp <- sources_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species)
# read in the species table
mod_calc_raw <- fread("./05-results/mod_calc.kraken2.gtdb.report_mpa.tsv")
# read in the file names to add as column headers
mod_names <- fread("./05-results/mod_calc_names.tsv", header = F) %>%
pull()
# add the sample names to the table
# move the lineage to the rownames so only samples are left as columns
mod_calc_raw <- mod_calc_raw %>%
column_to_rownames("#Classification")
# add the sample names
colnames(mod_calc_raw) <- mod_names
# move the lineage back to a column
mod_calc_raw <- mod_calc_raw %>%
rownames_to_column("Lineage")
# filter to have only species and remove all species with <1000 reads assigned
# even filtering out taxa with <10000 counts doesn't help
mod_calc_sp <- mod_calc_raw %>%
filter(str_detect(Lineage, "s__s__")) %>%
separate(Lineage, into = c("domain","phylum","class","order","family","genus","species"), sep = "\\|", extra = "merge") %>%
select(-c("domain","phylum","class","order","family","genus")) %>%
mutate(species = str_replace_all(species, "s__s__","")) %>%
adorn_totals(where = "col") %>%
filter(Total > 1000) %>%
select(-Total) %>%
arrange(species)
# load the database and convert to a tibble, then clean up dupliate entries
source_table <- fread("./00-documentation/cuperdec_oral_sources_gtdb_r202.tsv") %>%
select(species, Isolation_Source) %>%
as_tibble() %>%
# remove duplicates
distinct()
# if there are 2 entries then the species has both an "oral" source and an "other" source
# this is b/c at least 1 genome has the isolation source indicated as "oral" in NCBI
# since at least 1 genome was isolated from an "oral" site, we can say it's oral
# and need to remove the row that has the source as "other"
source_table <- source_table %>%
anti_join(source_table %>%
select(species, Isolation_Source) %>%
group_by(species) %>%
count() %>%
filter(n > 1) %>%
select(species) %>% ungroup()) %>%
# and then add back those species with an isolation source of "oral"
bind_rows(., source_table %>%
select(species, Isolation_Source)%>%
group_by(species) %>%
count() %>%
filter(n > 1) %>%
select(species) %>%
ungroup() %>%
mutate(Isolation_Source = "oral"))
database <- load_database(source_table, target = "oral") %>% print()
tax_table <- anc_calc_sp %>%
full_join(., source_sp) %>%
full_join(., mod_calc_sp) %>%
# need to convert NA to 0
mutate_all(~replace(., is.na(.), 0))
taxatable <- load_taxa_table(tax_table) # %>% print()
metadata <- lib_metadata  %>%
# now make the names match what was used in eager and what the species tables now have
mutate(Run_accession = ifelse(is.na(Run_accession) & Study == "Iberian", Sample_alias, Run_accession),
Secondary_sample_accession= ifelse(is.na(Secondary_sample_accession) & Study == "Iberian", Sample_alias, Secondary_sample_accession),
Run_accession = ifelse(str_detect(Study, "Granehaell2021|FellowsYates2021|Pacific|Velsko2018|Velsko2022|Fagernaes2022|Jacobson2020|Iberian|Neukamm2020|Warinner2014"), Sample_alias, Run_accession),
Run_accession = ifelse(Study == "Moraitou2022", Secondary_sample_accession, Run_accession),
Run_accession = ifelse(Study == "Mann2018", Sample_alias, Run_accession)) %>%
# select only the samples of interest and the sources
right_join(., anc_names %>%
as_data_frame(.) %>%
rename(Run_accession = 1) %>%
bind_rows(., source_names %>%
as_data_frame(.) %>%
rename(Run_accession = 1))) %>%
# remove duplicated ARS bone sample entries
filter(!(Study == "Pacific"  & str_sub(Sample_alias, 1, 3) == "ARS")) %>%
# plot by study for some clarity
# need to change the names of the source studies to the sources to keep consistent with other figures
mutate(Study = ifelse(str_detect(Study, "Oh2016"),"Skin",
ifelse(str_detect(Study, "Slon2017"),"Sediment",
ifelse(str_detect(Study, "Obregon|Rampelli"),"Gut",
ifelse(str_detect(Study, "HMP|Sankaranarayanan2015"),"Gut",
ifelse(str_detect(Sample_alias, "ARS"),"Bone", Study)))))) %>%
arrange(Study, Sample_alias) %>%
# remove soil, dentin, bones
filter(!str_detect(Sample_alias, "CSD|CSS|CSN|CSL|CDM045.Z0101|CDM047.Z0101|CDM053.J0101|CDM054.A0101"))
metadata <- metadata %>%
bind_rows(., lib_metadata  %>%
# now make the names match what was used in eager and the species tables now have
mutate(Run_accession = ifelse(is.na(Run_accession) & Study == "Iberian", Sample_alias, Run_accession),
Run_accession = ifelse(str_detect(Sample_alias, "VLC|JAE"),Sample_alias, Run_accession)) %>%
# select only the samples of interest and the sources
right_join(., mod_names %>% as_data_frame(.) %>% rename(Run_accession = 1))) %>%
mutate(Study = ifelse(str_detect(Run_accession, "JAE|VLC"),"Modern calculus",Study))%>%
mutate(Study = fct_relevel(Study, "Sediment","Bone","Gut","Skin", "Modern calculus"))
metadata_map <- load_map(metadata,
sample_col = "Run_accession",
source_col = "Study") # %>% print()
# in metadata_map but not taxatable
taxatable %>% select(Sample) %>% unique() %>%
anti_join(., metadata_map) %>%
arrange(Sample)
# in taxatable but not metadata_map
metadata_map %>%
anti_join(., taxatable %>% select(Sample) %>% unique())
metadata_map %>%
filter(!str_detect(Sample_Source, "Bone|Gut|Sediment|Skin|Modern")) %>%
count()
curves <- calculate_curve(taxatable, database = database) %>%
print()
plot_cuperdec(curves)
curves %>%
group_by(Sample) %>%
slice_min(Rank, n = 20) %>%
left_join(., source_table %>%
rename(Taxon = species), by = "Taxon")
plot_cuperdec(curves, metadata_map, restrict_x = 250)
adaptive_rank_burnin_result <- adaptive_burnin_filter(curves, percent_threshold = 40)
cd_curve_plot <- plot_cuperdec(curves, metadata_map, adaptive_rank_burnin_result, restrict_x = 250)
cd_curve_plot
# ggsave("./06-publication/supplemental_figures/Sup_fig_SXX1/cuperdec_anc_calc.png", plot = cd_curve_plot, device = "png",
#        scale = 1, width = 9, height = 5, units = c("in"), dpi = 300)
#
# ggsave("./06-publication/supplemental_figures/Sup_fig_SXX1/cuperdec_anc_calc.pdf", plot = cd_curve_plot, device = "pdf",
#        scale = 1, width = 9, height = 5, units = c("in"), dpi = 300)
View(metadata_map)
metadata_map %>%
filter(!str_detect(Sample_Source, "Bone|Gut|Sediment|Skin|Modern"))
metadata_map %>%
filter(!str_detect(Sample_Source, "Bone|Gut|Sediment|Skin|Modern")) %>%
unique() %>%
count()
q()
q()
